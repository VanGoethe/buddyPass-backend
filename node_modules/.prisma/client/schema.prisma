// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  name     String?
  password String? // Optional for OAuth users
  avatar   String?

  // OAuth fields
  googleId String? @unique
  provider String? // 'local' | 'google'

  // Role-based access control
  role UserRole @default(USER)

  // Account status
  isVerified Boolean @default(false)
  isActive   Boolean @default(true)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relations
  refreshTokens        RefreshToken[]
  subscriptionSlots    SubscriptionSlot[]
  subscriptionRequests SubscriptionRequest[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

model Currency {
  id        String   @id @default(cuid())
  name      String   @unique // Full name (e.g., "US Dollar", "Euro")
  code      String   @unique // ISO 4217 code (e.g., "USD", "EUR")
  symbol    String? // Currency symbol (e.g., "$", "€", "£")
  minorUnit Int      @default(2) // Number of decimal places (e.g., 2 for USD, 0 for JPY)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  countries     Country[]
  subscriptions Subscription[]

  @@map("currencies")
}

model Country {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique // ISO 3166-1 alpha-2 code (e.g., "US", "CA", "GB")
  alpha3      String   @unique // ISO 3166-1 alpha-3 code (e.g., "USA", "CAN", "GBR")
  numericCode String?  @unique // ISO 3166-1 numeric code (e.g., "840", "124", "826")
  continent   String?
  region      String?
  currencyId  String? // Foreign key to Currency
  phoneCode   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  currency             Currency?                @relation(fields: [currencyId], references: [id], onDelete: SetNull)
  serviceProviders     ServiceProviderCountry[]
  subscriptions        Subscription[]
  subscriptionRequests SubscriptionRequest[]

  @@map("countries")
}

model ServiceProvider {
  id          String   @id @default(cuid())
  name        String
  description String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subscriptions        Subscription[]
  supportedCountries   ServiceProviderCountry[]
  subscriptionRequests SubscriptionRequest[]

  @@map("service_providers")
}

model ServiceProviderCountry {
  id                String   @id @default(cuid())
  serviceProviderId String
  countryId         String
  createdAt         DateTime @default(now())

  // Relations
  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  country         Country         @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@unique([serviceProviderId, countryId])
  @@map("service_provider_countries")
}

model Subscription {
  id                String    @id @default(cuid())
  serviceProviderId String
  countryId         String?
  name              String
  email             String
  passwordHash      String
  availableSlots    Int
  expiresAt         DateTime?
  renewalInfo       Json?
  userPrice         Decimal?
  currencyId        String? // Foreign key to Currency instead of string
  metadata          Json?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  serviceProvider   ServiceProvider    @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  country           Country?           @relation(fields: [countryId], references: [id], onDelete: SetNull)
  currency          Currency?          @relation(fields: [currencyId], references: [id], onDelete: SetNull)
  subscriptionSlots SubscriptionSlot[]

  @@map("subscriptions")
}

model SubscriptionSlot {
  id             String   @id @default(cuid())
  userId         String
  subscriptionId String
  assignedAt     DateTime @default(now())
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([userId, subscriptionId])
  @@map("subscription_slots")
}

enum SubscriptionRequestStatus {
  PENDING
  ASSIGNED
  REJECTED
  CANCELLED
}

model SubscriptionRequest {
  id                String                    @id @default(cuid())
  userId            String
  serviceProviderId String
  countryId         String?
  status            SubscriptionRequestStatus @default(PENDING)
  assignedSlotId    String? // Reference to SubscriptionSlot if assigned
  requestedAt       DateTime                  @default(now())
  processedAt       DateTime?
  metadata          Json?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt

  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  country         Country?        @relation(fields: [countryId], references: [id], onDelete: SetNull)

  @@map("subscription_requests")
}
