// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  password    String?  // Optional for OAuth users
  avatar      String?
  
  // OAuth fields
  googleId    String?  @unique
  provider    String?  // 'local' | 'google'
  
  // Role-based access control
  role        UserRole @default(USER)
  
  // Account status
  isVerified  Boolean  @default(false)
  isActive    Boolean  @default(true)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?
  
  // Relations
  refreshTokens RefreshToken[]
  
  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@map("refresh_tokens")
}

model Country {
  id        String   @id @default(cuid())
  name      String   @unique
  code      String   @unique // ISO 3166-1 alpha-2 code (e.g., "US", "CA", "GB")
  alpha3    String   @unique // ISO 3166-1 alpha-3 code (e.g., "USA", "CAN", "GBR")
  numericCode String? @unique // ISO 3166-1 numeric code (e.g., "840", "124", "826")
  continent String?
  region    String?
  currency  String?
  phoneCode String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  serviceProviders ServiceProviderCountry[]
  subscriptions   Subscription[]

  @@map("countries")
}

model ServiceProvider {
  id          String   @id @default(cuid())
  name        String
  description String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  subscriptions Subscription[]
  supportedCountries ServiceProviderCountry[]
  
  @@map("service_providers")
}

model ServiceProviderCountry {
  id                String    @id @default(cuid())
  serviceProviderId String
  countryId         String
  createdAt         DateTime  @default(now())

  // Relations
  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  country         Country         @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@unique([serviceProviderId, countryId])
  @@map("service_provider_countries")
}

model Subscription {
  id                String    @id @default(cuid())
  serviceProviderId String
  countryId         String?
  name              String
  email             String
  passwordHash      String
  availableSlots    Int
  expiresAt         DateTime?
  renewalInfo       Json?
  userPrice         Decimal?
  currency          String?
  metadata          Json?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  country         Country?        @relation(fields: [countryId], references: [id], onDelete: SetNull)
  
  @@map("subscriptions")
} 